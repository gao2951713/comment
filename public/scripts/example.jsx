/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
 // 创建变量，作为全局变量初始化markdown编辑器。
var simplemde;
var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
	// 在html标签上添加非原生属性，浏览器会警告，并且自动将属性给过滤掉。只显示html属性。
      <div className="comment" {...this.props}>
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});
var CommentBox = React.createClass({
	loadCommentsFromServer: function() {

		// 在fetch中要请求的url地址。
		var promise = $.getJson(this.props.url,{});
		// resolve和reject方法的后续处理。
		promise.then(
				value => this.setState({data: value}),
				error => console.error(error)
			    );
	},
	handleCommentSubmit: function(comment) {
		var comments = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.
		comment.id = Date.now();
		var newComments = comments.concat([comment]);
		this.setState({data: newComments});
		var promse = $.postJson(this.props.url,comment);
		promse.then(
				value => this.setState({data:value}),
				err => {
					this.setState({data:comments});
					console.error(this.props.url,err.status,err.toString());
				}
			   );
		// $.ajax({
		//   url: this.props.url,
		//   dataType: 'json',
		//   type: 'POST',
		//   data: comment,
		//   success: function(data) {
		//     this.setState({data: data});
		//   }.bind(this),
		//   error: function(xhr, status, err) {
		//     this.setState({data: comments});
		//     console.error(this.props.url, status, err.toString());
		//   }.bind(this)
		// });
	},
	getInitialState: function() {
		return {data: []};
	},
	/**
	 * 
	 * 	 *
	 *
	 */
	componentDidMount: function() {
		this.loadCommentsFromServer();
		setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	},
	render: function() {
		return (
				<div className="commentBox">
				<h1>Comments</h1>
				<CommentList data={this.state.data} />
				<CommentForm onCommentSubmit={this.handleCommentSubmit} />
				</div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
	  // debugger;
		      // 此处的注释都不能写在react的return组件中，不然this.props.children会扫描，显示到界面上。
	// jsx只是javascript里面的表达式写法，所以，需要用{}括起来。
	{/* 一般注释, 用 {} 包围 */}
	/* 多
         行
         注释 */

      return (
        <Comment author={comment.author} id={comment.id} key={comment.id}>
		          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  // 使用编辑器插件后，由于textarea标签被mde插件替代，所以onChange事件不再触发
  // 废除掉该方法
  //handleTextChange: function(e) {
  //  this.setState({text: e.target.value});
  // },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
	// 改变获取文本方式。将textarea.onchange获取改为markdown编辑器插件的mde.value()方式
    var text = simplemde.value();
    // var text = this.state.text.trim();
	debugger;
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  /**
   *
   * 页面标签加载后才加载后该方法中的处理
   * 调用simplemde编辑器插件，初始化到页面的textarea标签
   *
   */
  componentDidMount: function() {
	  
	var obj = {};
	obj.element= document.getElementById("mde");
	simplemde = new SimpleMDE(obj);
	simplemde.value("this is a test case of simplemarkdown editor");
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <textarea
		// 对于添加含有键值对的属性，需要像下列用花括号括起来，并且单位需要用字符串拼接方式写。
          type="text"  style={{width:800+'px',height:35+'px'}} //将页面上的input改为textarea
          placeholder="Your name"
		  title="请输入标题"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
		<br />
        <textarea
          type="text" id="mde" style={{width:800+'px',height:350+'px'}}
          placeholder="Say something..."
		  title = "请输入文本内容！"
          value={this.state.text}
		  // 由于被mde控件替代。该事件不会触发
          // onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
